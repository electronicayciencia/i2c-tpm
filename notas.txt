Self-tests:
  - The deterministic RNG produces blocks of 160 bits. Each subsequent 160-bit block output from the RNG is compared to the previous block. The test fails if any two compared 160-bit sequences are equal.

Physical Presence authorization may be accomplished by setting a logic high voltage on the hardware pin at the time a service request is sent to the module (assertion of tpmGo bit in the TIS register [5]). 

Failed Authentication Attempts Counter: The TOE accumulates the total number of failed authorization attempts on any entity in the FAILCOUNT register.

The TOE contains an active metal shield that covers the internal TPM circuitry and memory components. Cutting, removing or modifying the shield layer will cause the TPM to Reset and enter a FAIL mode.


TPM Structures (.c):
https://chromium.googlesource.com/chromiumos/third_party/tpm-emulator/+/6b062e43d7bbc59af1aca33cb01393a4ecf1a280/tpm/tpm_structures.h

https://trustedcomputinggroup.org/wp-content/uploads/TCG-TPM-I2C-Interface-Specification-v1.00.pdf


Figure 3. Typical hardware implementation (TSSOP28 package): de ST. Pines más imporantes en comun con Atmel.


A Practical Guide to Trusted Computing: Writing a TPM Device Driver
https://www.informit.com/articles/article.aspx?p=1154764&seqNum=3



 - Locality 4: Trusted hardware component. This is used by the D-CRTM to establish the Dynamic RTM. 125 2
 - Locality 3: Auxiliary components. Use of this is optional and, if used, it is implementation dependent.
 - Locality 2: Dynamically Launched OS (Dynamic OS) “runtime” environment.
 - Locality 1: An environment for use by the Dynamic OS.
 - Locality 0: The Static RTM, its chain of trust and its environment.
 - Locality None: This locality is defined for using TPM 1.1 type I/O-mapped addressing. The TPM behaves as if Locality 0 is selected.

TPM 1.1b -> commands (vendor specific)
TPM 1.2 -> memory mapping
  FED4 L000 - FED4 LFFF -> L is locality (0-4).



I2C:
The default 7-bit I2C device address is 0x2E, the 8th bit indicates the data direction.
 - 0x5D for an I2C read request and 
 - 0x5C for an I2C write transmission.

Is required that the bus master supports the clock stretching mechanism

The I2C-TPM SHALL support a supply and I/O voltage of 1.8V or 3.3V.

PIRQ# = PCI-IRQ. IRQ = 0-15; PIRQ > 15

Multi byte: In all cases, except the TPM_STS register, the access to such multi-byte registers is only possible from the register base address.

I2C registers:
0x00         TPM_LOC_SEL
0x04         TPM_ACCESS  
0x18 – 0x1B	 TPM_STS
0x24         TPM_DATA_FIFO
0x30         TPM_I2C_INTERFACE_CAPABILITY
0x48         TPM_DID_VID
0x4C         TPM_RID 

Reading of the burstCount may be critical when read in single bytes because the low part might change when the high part is read (and vice versa). Therefore it is strongly recommended to read the whole burstCount in one cycle.


Lo datos se escriben a TPM_DATA_FIFO en rafagas de Burstcount escrituras.










sudo apt-get install tpm-quote-tools tpm-tools-pkcs11

Repos para mirar:

https://github.com/Rohde-Schwarz/TPMManager






Mirar cómo es el TPM reset attack - Described independently by Kauer and Sparks


ATMEL's AT97SC3204T I2C TPM
https://github.com/theopolis/tpm-i2c-atmel


System Design Manufacturing Recommendations for Atmel TPM Devices - Microchip
http://ww1.microchip.com/downloads/en/AppNotes/Atmel-8882-TPM-System-Design-Mftg-Recommendations-ApplicationNote.pdf







sudo tpmtoken_init -l debug
A new TPM security officer password is needed. The password must be between 4 and 8 characters in length.
Enter new password: 12341234

error




https://chromium.googlesource.com/chromiumos/third_party/kernel-next/+/chromeos-tpm-3.4/drivers/char/tpm/tpm_tis_i2c.c



https://i.blackhat.com/eu-19/Thursday/eu-19-Han-BitLeaker-Subverting-BitLocker-With-One-Vulnerability.pdf




--------------------



sudo apt-get install gnutls-bin
viene el manual para tpmtool pero no el binario.

tpmtool is missing
https://bugs.launchpad.net/ubuntu/+source/gnutls28/+bug/1702755

In this section we present the Trusted Platform Module (TPM) support 
in @acronym{GnuTLS}. Note that this functionality is disabled by default
because the @code{trousers} libraries GnuTLS depends on
are under the Common Public License which is not compatible with the GPL 
license. By disabling this feature by default we ensure that the GnuTLS library can
be linked by both GPL and non-GPL programs, but you can enable this option
during the library configuration.



apt-get source gnutls-bin
./configure --with-included-unistring --with-tpm


---------------

I2C
Necesita reset a Vcc para funcionar.
I2C Addr 29h  (R: 53, W: 52)

Leer el TPM_STS (0x18 +4)

si lees ff da lo mismo: c6 13 8d 51
leyendo mal


s
w52
w00
p
s
w53
r01
a
p
q



Siempre responde esto:
c6 13 8d 51 4f fa 21 35 bf ce 0e d0 b8 fa c6 56 69 91 7e c7 c6 13 8d 51 4f fa 21 35 bf ce 0e d0 b8 fa c6 56 69 91 7e c7 28 29 2a 2b 2c 2d 2e 2f 30 31 32 33 34 35 36 37 38 39 3a 3b 3c 3d 3e 3f 00 00 00


Empiezo a mandarle ceros, uno, dos, tres, cuatro ceros seguidos y siempre responde eso. Hasta que:



primer comando que hace algo: zeros.i2c
w52
w00
w00
w00
w00
w00
w00
w00
w00
w00
w00
Responde con:
00 c4 00 00 00 0a 00 00 00 1e

Que es coherente con:

00 c4 -> TPM_TAG_RSP_COMMAND
00 00 00 0a -> 10 bytes
00 00 00 1e -> TPM_BADTAG  (The tag value sent to for a command is invalid)

A veces responde bien y a veces con NACK.
Si esperas 10ms responde bien.
Si esperas también responde bien al restart.


------

Random:

Bytes aleatorios: random.i2c

w00 
wC1  
w00 
w00 
w00 
w0E
w00 
w00 
w00 
w46 
w00 
w00 
w00 
w14

Devuelve: 00 c4 00 00 00 0a 00 00 00 26
0x26 = 38 = TPM_INVALID_POSTINIT

------

Init:

w00
wC1
w00
w00
w00
w0A
w00
w00
w00
w97

Devuelve:
00 c4 00 00 00 0a 00 00 00 0a

0a = TPM_BAD_ORDINAL

¿no existe? Probemos con startup

------

w00
wC1
w00
w00
w00
w0C
w00
w00
w00
w99
w00
w01

Devuelve también TPM_INVALID_POSTINIT.

Probamos con self test.

------

TPM_ORD_ContinueSelfTest  0x00000053

w00
wC1
w00
w00
w00
w0a
w00
w00
w00
w53

Este ya sí devuelve 00:
00 c4 00 00 00 0a 00 00 00 00 

Tras esto, ya funciona random.
------

random.i2c:
r -> 00 c4 00 00 00 22 00 00 00 00 00 00 00 14 c5 b4 01 be dd d3 d4 2a 32 23 57 2b 38 0f b8 75 94 c2 e2 94 ff ff ff ff ff ff


------

get vendor id:

TPM_ORD_GetCapability  0x00000065 
0x00000005  TPM_CAP_PROPERT
0x00000103  TPM_CAP_PROP_MANUFACTURER 


00 C1
00 00 00 16
00 00 00 65
00 00 00 05
00 00 00 04
00 00 01 03

Devuelve:  00 c4 00 00 00 12 00 00 00 00 00 00 00 04 41 54 4d 4c

41 54 4d 4c = ATML



Revisar si el clock stretching sigue funcionando en la librería i2c.




-----------------


$ tpm_version
TPM 1.2 Version Info:
  Chip Version:        1.2.66.16
  Spec Level:          2
  Errata Revision:     3
  TPM Vendor ID:       ATML
  TPM Version:         01010000
  Manufacturer Info:   41544d4c



reinoso@ubuntu18:~/tpm/pruebas$ tpm_getpubek 
Public Endorsement Key:
  Version:   01010000
  Usage:     0x0002 (Legacy)
  Flags:     0x00000000 (!VOLATILE, !MIGRATABLE, !REDIRECTION)
  AuthUsage: 0x00 (Never)
  Algorithm:         0x00000020 (RSA)
  Encryption Scheme: 0x00000012 (RSAESOAEP_SHA1_MGF1)
  Signature Scheme:  0x00000010 (None)
  Key Size:          2048 bits
  Public Key:
	d88f090b c0c45329 1d9c23c1 c52e7ff1 3b4d6aa4 f0442c49 05688608 e12ebaa8
	02ad89c0 d82dbde8 7bee64e7 ca694671 0a90f33a b6e4593a db87add7 aea953ed
	b0d7dcd3 787c21fa 2b62bd8d e3356191 9b4ef3bb 29b356dd 3060752b cb8bc640
	c36c3ec5 9c4ed175 e2e6148e 57e8c54c 03e8b42e 3ff95b3f ca4936a6 bfcc7372
	f7092e90 0d32183c 3f53aa82 0a9ced81 4fdbf14a 40a7463a c216c0e0 decbfc03
	aea77244 708fc6b6 0fe6ecab a0240818 5a33b955 975e6467 f19e70ff 9814fd20
	f9358a3f fa33652f a9b079bd 6b0e817d 7d44125b ac7ee727 d856775a 987d3162
	b65fd78c cbbb1430 ddc6cbb9 0c3eaf6f fb159bea 1d05a287 c75e5731 1d6bbaff

Levantar bridge tcp a i2c en la raspberry:

    pi@raspberrypi:~$ ./tcp2i2c
    20:55:52 INFO  tcp2i2c.c:96: TPM TCP to I2C bridge by electronicaYciencia.
    20:55:52 INFO  tcp2i2c.c:97: Listening on port 8888.
    
Lanzar el demonio tscd en la maquina virtual:

    export TCSD_USE_TCP_DEVICE=true
    export TCSD_TCP_DEVICE_PORT=8888
    export TCSD_TCP_DEVICE_HOSTNAME=192.168.1.121
    tcsd -e -f


Reset, da 26 invalid_post_init.

Mandamos startup:

    $ echo -ne "\x00\xC1\x00\x00\x00\x0C\x00\x00\x00\x99\x00\x01" | netcat 192.168.1.121 8888 | hd
    00000000  00 c4 00 00 00 0a 00 00  00 00                    |..........|
    0000000a

Vemos como el bridge envía en comando y recibe la respuesta. Tarda bastante.
    19:07:35 INFO  tpm_tcp.c:51:  --> tag: 0x00c1 (TPM_TAG_RQU_COMMAND), size: 12 bytes, ordinal: 0x00000099 (TPM_ORD_Startup)
    19:07:35 WARN  tpm_i2c.c:58: Device not ready (try 1 of 10)
    19:07:35 WARN  tpm_i2c.c:58: Device not ready (try 2 of 10)
    19:07:35 WARN  tpm_i2c.c:58: Device not ready (try 3 of 10)
    19:07:35 WARN  tpm_i2c.c:58: Device not ready (try 4 of 10)
    19:07:35 INFO  tpm_i2c.c:39:  <-- tag: 0x00c4 (TPM_TAG_RSP_COMMAND), size: 10 bytes, return code: 0x00000000 (TPM_SUCCESS)

Lanzamos el tscd, lee el estado:

    19:09:26 INFO  tpm_tcp.c:51:  --> tag: 0x00c1 (TPM_TAG_RQU_COMMAND), size: 18 bytes, ordinal: 0x00000065 (TPM_ORD_GetCapability)
    19:09:26 INFO  tpm_i2c.c:39:  <-- tag: 0x00c4 (TPM_TAG_RSP_COMMAND), size: 29 bytes, return code: 0x00000000 (TPM_SUCCESS)
    ...
    19:09:26 INFO  tpm_tcp.c:51:  --> tag: 0x00c1 (TPM_TAG_RQU_COMMAND), size: 18 bytes, ordinal: 0x00000065 (TPM_ORD_GetCapability)
    19:09:26 INFO  tpm_i2c.c:39:  <-- tag: 0x00c4 (TPM_TAG_RSP_COMMAND), size: 16 bytes, return code: 0x00000000 (TPM_SUCCESS)


Versión del TPM, Atmel.

    $ tpm_version 
    TPM 1.2 Version Info:
      Chip Version:        1.2.66.16
      Spec Level:          2
      Errata Revision:     3
      TPM Vendor ID:       ATML
      TPM Version:         01010000
      Manufacturer Info:   41544d4c

Listar PCR:

    19:18:51 INFO  tpm_tcp.c:51:  --> tag: 0x00c1 (TPM_TAG_RQU_COMMAND), size: 14 bytes, ordinal: 0x00000015 (TPM_ORD_PcrRead)
    19:18:51 INFO  tpm_i2c.c:39:  <-- tag: 0x00c4 (TPM_TAG_RSP_COMMAND), size: 30 bytes, return code: 0x00000000 (TPM_SUCCESS)
    ...


    $ ./list_pcrs 
    PCR List
    PCR00: 0000000000000000000000000000000000000000
    PCR01: 0000000000000000000000000000000000000000
    ...

Ver la EK que viene de serie:

    19:21:22 INFO  tpm_tcp.c:51:  --> tag: 0x00c1 (TPM_TAG_RQU_COMMAND), size: 30 bytes, ordinal: 0x0000007c (TPM_ORD_ReadPubek)
    19:21:22 INFO  tpm_i2c.c:39:  <-- tag: 0x00c4 (TPM_TAG_RSP_COMMAND), size: 314 bytes, return code: 0x00000000 (TPM_SUCCESS)



    $ tpm_getpubek 
    Public Endorsement Key:
      Version:   01010000
      Usage:     0x0002 (Legacy)
      Flags:     0x00000000 (!VOLATILE, !MIGRATABLE, !REDIRECTION)
      AuthUsage: 0x00 (Never)
      Algorithm:         0x00000020 (RSA)
      Encryption Scheme: 0x00000012 (RSAESOAEP_SHA1_MGF1)
      Signature Scheme:  0x00000010 (None)
      Key Size:          2048 bits
      Public Key:
        d88f090b c0c45329 1d9c23c1 c52e7ff1 3b4d6aa4 f0442c49 05688608 e12ebaa8
        02ad89c0 d82dbde8 7bee64e7 ca694671 0a90f33a b6e4593a db87add7 aea953ed
        b0d7dcd3 787c21fa 2b62bd8d e3356191 9b4ef3bb 29b356dd 3060752b cb8bc640
        c36c3ec5 9c4ed175 e2e6148e 57e8c54c 03e8b42e 3ff95b3f ca4936a6 bfcc7372
        f7092e90 0d32183c 3f53aa82 0a9ced81 4fdbf14a 40a7463a c216c0e0 decbfc03
        aea77244 708fc6b6 0fe6ecab a0240818 5a33b955 975e6467 f19e70ff 9814fd20
        f9358a3f fa33652f a9b079bd 6b0e817d 7d44125b ac7ee727 d856775a 987d3162
        b65fd78c cbbb1430 ddc6cbb9 0c3eaf6f fb159bea 1d05a287 c75e5731 1d6bbaff
    


Pasos descritos en *System Design Manufacturing Recommendations for Atmel TPM Devices*, sección "Sample Manufacturing Sequence":
- Step 1: Physically boot the TPM by performing a normal hardware power-up or reset sequence.
- Step 2: TPM_Startup(ST_CLEAR)
ok

- Step 3: TSC_PhysicalPresence



Pedimos el estado de los flags:

0x00000108  TPM_CAP_FLAG_PERMANENT

$ echo -ne "\x00\xC1\x00\x00\x00\x16\x00\x00\x00\x65\x00\x00\x00\x04\x00\x00\x00\x04\x00\x00\x01\x08" | netcat 192.168.1.121 8888 | hd
00000000  00 c4 00 00 00 24 00 00  00 00 00 00 00 16 00 1f  |.....$..........|
00000010  00 01 00 01 00 00 00 00  01 01 00 00 00 00 00 00  |................|
00000020  00 00 00 00                                       |....|
00000024


  00  disable
* 01  ownership
  00  deactivated
* 01  readPubek
  00  disableOwnerClear
  00  allowMaintenance
  00  physicalPresenceLifetimeLock
  00  physicalPresenceHWEnable
* 01  physicalPresenceCMDEnable
* 01  CEKPUsed
  00  TPMpost
  00  TPMpostLock
  00  FIPS
  00  operator
  00  enableRevokeEK
  00  nvLocked
  00  readSRKPub
  00  tpmEstablished
  00  maintenanceDone
  00  disableFullDALogicInfo 


Hacemos el take ownership:

    $ tpm_takeownership --owner-well-known --srk-well-known


Presencia:

reinoso@ubuntu18:~/tpm/pruebas$ tpm_setpresence -s -z
Physical Presence Status:
	Command Enable: true
	Hardware Enable: false
	Lifetime Lock: false
	Physical Presence: false
	Lock: false

Clear:

    $ tpm_clear -z
    TPM Successfuly Cleared.  You need to reboot to complete this operation.  After reboot the TPM will be in the default state: unowned, disabled and inactive.
    
Las capabilityes ahora muestran deactivated:

    $ echo -ne "\x00\xC1\x00\x00\x00\x16\x00\x00\x00\x65\x00\x00\x00\x04\x00\x00\x00\x04\x00\x00\x01\x08" | netcat 192.168.1.121 8888 | hd
    00000000  00 c4 00 00 00 24 00 00  00 00 00 00 00 16 00 1f  |.....$..........|
    00000010  01 01 01 01 00 00 00 00  01 01 00 00 00 00 00 00  |................|
    00000020  00 00 00 00                                       |....|
    00000024
    
El getpubek lo confirma:


    $ tpm_getpubek 
    Tspi_TPM_GetPubEndorsementKey failed: 0x00000006 - layer=tpm, code=0006 (6), TPM is deactivated

    23:49:15 INFO  tpm_tcp.c:51:  --> tag: 0x00c1 (TPM_TAG_RQU_COMMAND), size: 30 bytes, ordinal: 0x0000007c (TPM_ORD_ReadPubek)
    23:49:15 INFO  tpm_i2c.c:39:  <-- tag: 0x00c4 (TPM_TAG_RSP_COMMAND), size: 10 bytes, return code: 0x00000006 (TPM_DEACTIVATED)


Habilitamos presencia:

    tag:               00 C1         (TPM_TAG_RQU_COMMAND)
    paramSize:         00 00 00 0C
    ordinal:           40 00 00 0A   (TSC_ORD_PhysicalPresence)
    physicalPresence:  00 20         (TPM_PHYSICAL_PRESENCE_CMD_ENABLE)
    
    
    $ echo -ne '\x00\xC1\x00\x00\x00\x0C\x40\x00\x00\x0A\x00\x20' | netcat 192.168.1.121 8888 | hd


    23:52:39 INFO  tpm_tcp.c:51:  --> tag: 0x00c1 (TPM_TAG_RQU_COMMAND), size: 12 bytes, ordinal: 0x4000000a (TSC_ORD_PhysicalPresence)
    23:52:39 INFO  tpm_i2c.c:39:  <-- tag: 0x00c4 (TPM_TAG_RSP_COMMAND), size: 10 bytes, return code: 0x00000000 (TPM_SUCCESS)

Activamos presencia fisica:

    $ echo -ne '\x00\xC1\x00\x00\x00\x0C\x40\x00\x00\x0A\x00\x08' | netcat 192.168.1.121 8888 | hd

Habilitamos TPM:

    $ tpm_setenable --force --enable --well-known
    
    23:56:21 INFO  tpm_tcp.c:51:  --> tag: 0x00c1 (TPM_TAG_RQU_COMMAND), size: 10 bytes, ordinal: 0x0000006f (TPM_ORD_PhysicalEnable)
    23:56:21 INFO  tpm_i2c.c:39:  <-- tag: 0x00c4 (TPM_TAG_RSP_COMMAND), size: 10 bytes, return code: 0x00000000 (TPM_SUCCESS)
    
Activamos TPM:

    $ tpm_setactive  --active
    Action requires a reboot to take effect
    
	
    23:57:26 INFO  tpm_tcp.c:51:  --> tag: 0x00c1 (TPM_TAG_RQU_COMMAND), size: 11 bytes, ordinal: 0x00000072 (TPM_ORD_PhysicalSetDeactivated)
    23:57:26 INFO  tpm_i2c.c:39:  <-- tag: 0x00c4 (TPM_TAG_RSP_COMMAND), size: 10 bytes, return code: 0x00000000 (TPM_SUCCESS)

Reset + startup.

Y take ownership (puede tardar varios segundos).

    $ tpm_takeownership --owner-well-known --srk-well-known
    $ 




Step 5 TPM_ForceClear
TPM_ForceClear will clear the compliance data from the TPM. Clearing compliance data from the TPM during
manufacturing is recommended if compliance devices are purchased. This step is not necessary when
initializing Real mode devices.
TPM_ForceClear
Incoming Operands and Sizes:
00 C1 00 00 00 0A 00 00 00 5D




    $ echo -ne "\x00\xC1\x00\x00\x00\x0A\x00\x00\x00\x5D" | netcat 192.168.1.121 8888 | hd
    00000000  00 c4 00 00 00 0a 00 00  00 00                    |..........|
    0000000a


    00:14:33 INFO  tpm_tcp.c:51:  --> tag: 0x00c1 (TPM_TAG_RQU_COMMAND), size: 10 bytes, ordinal: 0x0000005d (TPM_ORD_ForceClear)
    00:14:33 WARN  tpm_i2c.c:58: Device not ready (try 1 of 1000)
    00:14:33 WARN  tpm_i2c.c:58: Device not ready (try 2 of 1000)
    00:14:33 INFO  tpm_i2c.c:39:  <-- tag: 0x00c4 (TPM_TAG_RSP_COMMAND), size: 10 bytes, return code: 0x00000000 (TPM_SUCCESS)




























